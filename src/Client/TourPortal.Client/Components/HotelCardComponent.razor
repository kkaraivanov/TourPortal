@using System.Text.RegularExpressions
@using TourPortal.Infrastructure.Shared.Enums

@if (!IsEditable)
{
    <div class="card card border-primary mb-3">
        <div class="d-md-flex">
            <div class="col-12 col-md-3 p-2 w-100 card" style="width: 25rem;">
                @if (string.IsNullOrEmpty(ImageUrl))
                {
                    <img class="card-img" src="/images/hotel.png" alt="Card image cap">
                }
                else
                {
                    <img class="card-img" src="@ImageUrl" alt="Card image cap">
                }
            </div>
            <div class="col-12 col-md-9 pl-0 pl-md-2">
                <div class="mb-3 pl-2 d-flex flex-column justify-content-between h-100 p-2">
                    <div class="card-body">
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Име:</label>
                            <div class="col-sm-10">
                                <input type="text" readonly class="form-control-plaintext" value="@Name">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Град:</label>
                            <div class="col-sm-10">
                                <input type="text" readonly class="form-control-plaintext" value="@City">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Адрес:</label>
                            <div class="col-sm-10">
                                <input type="text" readonly class="form-control-plaintext" value="@Address">
                            </div>
                        </div>
                        @if (Contacts.Any())
                        {
                            @foreach (var (contact, contactType) in Contacts)
                            {
                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label">@contactType: </label>
                                    <div class="col-sm-10">
                                        <input type="text" readonly class="form-control-plaintext" value="@contact">
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    @ButtonSection
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="card card border-primary mb-3">
        <div class="d-md-flex">
            <div class="col-12 col-md-3 p-2 w-100 card" style="width: 25rem;">
                @if (string.IsNullOrEmpty(ImageUrl))
                {
                    <img class="card-img" src="/images/hotel.png" alt="Card image cap">
                }
                else
                {
                    <img class="card-img" src="@ImageUrl" alt="Card image cap">
                }
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@ImageUrl">
            </div>
            <div class="col-12 col-md-9 pl-0 pl-md-2">
                <div class="mb-3 pl-2 d-flex flex-column justify-content-between h-100 p-2">
                    <div class="card-body">
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Име:</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@Name">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Град:</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@City">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Адрес:</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@Address">
                            </div>
                        </div>
                        @if (Contacts.Any())
                        {
                            @foreach (var hotelContact in Contacts)
                            {
                                ContactType contactType = hotelContact.Value;
                                string contact = hotelContact.Key;
                                <div class="form-group row">
                                    <label class="col-sm-2 col-form-label">@contactType: </label>
                                    <div class="col-sm-10 contact">
                                        <input type="text" id="contact" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@contact">
                                        <button @onclick="@(() => RemoveContact(contact))">Премахни</button>
                                    </div>
                                </div>
                            }
                        }
                        @if (!isAdd)
                        {
                            <div class="row d-flex justify-content-end">
                                <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => IsAddChange()) Text="Добави контакти" ButtonStyle="ButtonStyle.Primary"/>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-12 d-flex p-0">
                                    <div class="col-6">
                                        <select class="custom-select" @bind="@newContactType">
                                            @foreach (var value in contactTypes)
                                            {
                                                <option value="@value">@value</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-6">
                                        <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@newContact">
                                    </div>
                                </div>
                                <div class="col-12 d-flex justify-content-end p-0 pt-3">
                                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => AddContact()) Text="Запази" ButtonStyle="ButtonStyle.Primary"/>
                                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => CancleAddContact()) Text="Отказ" ButtonStyle="ButtonStyle.Warning"/>
                                </div>
                            </div>
                        }
                    </div>
                    @ButtonSection
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public RenderFragment ButtonSection { get; set; }
    
    [Parameter]
    public string Name { get; set; }
    
    [Parameter]
    public string City { get; set; }
    
    [Parameter]
    public string Address { get; set; }
    
    [Parameter]
    public string ImageUrl { get; set; }
    
    [Parameter]
    public Dictionary<string, ContactType> Contacts { get; set; } = new Dictionary<string, ContactType>();
    
    [Parameter]
    public bool IsEditable { get; set; }

    private bool isAdd = false;
    private string newContact = string.Empty;
    private Regex phoneRegex = new Regex(@"08[789]\d{7}\b");
    private Regex emailRegex = new Regex(@"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?");
    private ContactType newContactType;
    private List<ContactType> contactTypes = new List<ContactType>
    {
        {ContactType.Email},
        {ContactType.Phone},
        {ContactType.Fax}
    };

    private void AddContact()
    {
        if (newContactType == ContactType.Phone)
        {
            if (!phoneRegex.IsMatch(newContact))
            {
                isAdd = false;
                return;
            }
        }

        if (newContactType == ContactType.Email)
        {
            if (!emailRegex.IsMatch(newContact))
            {
                isAdd = false;
                return;
            }
        }
        
        if (!Contacts.ContainsKey(newContact))
        {
            Contacts[newContact] = newContactType;
        }

        newContact = string.Empty;
        isAdd = false;
        StateHasChanged();
    }

    private void RemoveContact(string contact)
    {
        Contacts.Remove(contact);
    }

    private void CancleAddContact()
    {
        Contacts = new Dictionary<string, ContactType>();
        isAdd = false;
        StateHasChanged();
    }

    private void IsAddChange() => isAdd = isAdd != true;
}
<style>
    div.contact input[type=text] {
        float: left;
        width: 80%;
    }

    div.contact button {
        float: left;
        width: 20%;
        padding: 3px;
        background: red;
        color: white;
        font-size: 17px;
        border: 1px solid grey;
        border-left: none;
        cursor: pointer;
        border-radius: 5px;
    }

    div.contact button:hover {
        background: #0b7dda;
    }

    div.contact::after {
        content: "";
        clear: both;
        display: table;
    }
</style>