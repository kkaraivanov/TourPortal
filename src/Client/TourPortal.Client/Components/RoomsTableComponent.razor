@typeparam TItem
<div class="col-12">
    <div>
        <table class="table table-hover table-responsive">
            <thead class="bg-head">
            <tr class="text-center">
                @Columns
            </tr>
            </thead>
            <tbody>
            @foreach (var item in ItemList)
            {
                <tr>@Row(item)</tr>
            }
            </tbody>
        </table>
    </div>
</div>
@if (ItemList.Any())
{
    <div>
        <button class="btn-primary mr-2" @onclick="@(e => Navigate("prev"))">Назад</button>
        @for (int i = 0; i < TotalPages; i++)
        {
            var pageNumbe = i;
            <button class="btn @(CurrentPage == pageNumbe ? "btn-dark disable" : "btn-info")" @onclick="@(e => UpdateList(pageNumbe))">@(i + 1)</button>
        }
        <button class="btn-primary ml-2" @onclick="@(e => Navigate("next"))">Напред</button>
    </div>
}

@code {
    [Parameter]
	public RenderFragment Columns { get; set; }

	[Parameter]
	public RenderFragment<TItem> Row { get; set; }

	[Parameter] 
	public List<TItem> Items { get; set; }

    [Parameter]
    public bool ReloadList { get; set; }

    public List<TItem> ItemList { get; set; }

    public int PageSize { get; set; }
    public int TotalPages { get; set; }
    public int CurrentPage { get; set; }

    protected override void OnInitialized()
    {
        PageSize = 5;
        if (Items != null)
        {
            ItemList = Items.Take(PageSize).ToList();
            TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender && ReloadList)
        {
            UpdateList();
            ReloadList = false;

            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    private void UpdateList(int pageNumber = 0)
    {
        if (Items != null)
        {
            ItemList = Items.Skip(pageNumber * PageSize).Take(PageSize).ToList();
            TotalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
            CurrentPage = pageNumber;
        }
    }

    private void Navigate(string direction)
    {
        if (direction == "prev" && CurrentPage != 0)
        {
            CurrentPage -= 1;
        }

        if (direction == "next" && CurrentPage != TotalPages-1)
        {
            CurrentPage += 1;
        }

        UpdateList(CurrentPage);
    }
}
<style>
    thead.bg-head {

    }
</style>