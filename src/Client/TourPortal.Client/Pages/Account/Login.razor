<div id="loginModal" class="modal-form-panel">
    <div class="panel-body">
        <h3 class="text-center heading-text">Вход</h3>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" Context="LoginForm" style="height: 400px">
            <DataAnnotationsValidator/>
            <div class="d-flex flex-column justify-content-between h-100">
                <div>
                    <div class="form-group">
                        <label for="username"></label>
                        <InputText Id="username" type="text" class="form-control" tabindex="1" placeholder="Email address" @bind-Value="@loginModel.Email"/>
                        <ValidationMessage For="@(() => loginModel.Email)"/>
                    </div>
                    <div class="form-group">
                        <label for="password"></label>
                        <InputText Id="password" type="password" class="form-control" tabindex="2" placeholder="Password" @bind-Value="@loginModel.Password"/>
                        <ValidationMessage For="@(() => loginModel.Password)"/>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-sm-6 offset-sm-3">
                            <button type="submit" name="login-submit" id="login-submit" tabindex="3" class="form-control btn btn-login">Влез</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@if (ShowErrors)
{
	<div class="alert alert-danger" role="alert">
	 <p>@Error</p>
	</div>
}

@code {
	[CascadingParameter] BlazoredModalInstance ModalForm { get; set; }

	private LoginModel loginModel = new LoginModel();
	private bool ShowErrors;
	private string Error = "";

	private async Task HandleLogin()
	{
		ShowErrors = false;
		var result = await AuthenticationService.Login(loginModel);

		if (result.IsOk)
		{
			await Close();
			NavigationManager.NavigateTo("/");
		}
		else
		{
			Error = string.Join(Environment.NewLine, result.Errors);
			ShowErrors = true;
		}
	}

	private async Task Close()
	{
	    await ModalForm.CloseAsync();
	}
}
