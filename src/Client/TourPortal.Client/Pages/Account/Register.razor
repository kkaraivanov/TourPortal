@using TourPortal.Infrastructure.Global.Types
<div id="loginModal" class="modal-form-panel">
	<div class="panel-body">
		<h3 class="text-center heading-text">Вход</h3>
		<EditForm OnValidSubmit="OnSubmit" Model="register" Context="RegisterForm" style="height: 400px">
			<DataAnnotationsValidator />
			<div class="d-flex flex-column justify-content-between h-100">
				<div>
					<div class="form-group">
						<label for="username" class="sr-only">User Name</label>
						<InputText id="username" type="text" class="form-control" placeholder="Потребителско име" autofocus @bind-Value="@register.UserName" />
						<ValidationMessage For="@(() => register.UserName)" />
					</div>
					<div class="form-group">
						<label for="email" class="sr-only">Email</label>
						<InputText id="email" type="text" class="form-control" placeholder="Email" autofocus @bind-Value="@register.Email" />
						<ValidationMessage For="@(() => register.Email)" />
					</div>

					<div class="form-group">
						<InputSelect @bind-Value="@register.RoleId" class="form-control">
							@if (UserTypes.Count > 0)
							{
		   <option value="" disabled selected hidden>Избери роля</option>
								@foreach (var role in UserTypes)
								{
			   <option class="form-control" value="@role.RoleId">@role.RoleName</option>
								}
							}
	  </InputSelect>
	  <ValidationMessage For="@(() => register.RoleId)" />
	 </div>

	 <div class="form-group">
	  <label for="password" class="sr-only">Password</label>
	  <InputText type="password" id="password" class="form-control" placeholder="Парола" @bind-Value="@register.Password" />
	  <ValidationMessage For="@(() => register.Password)" />
	 </div>

	 <div class="form-group">
	  <label for="passwordConfirm" class="sr-only">Password Confirmation</label>
	  <InputText type="password" id="passwordConfirm" class="form-control" placeholder="Потвърди палолата" @bind-Value="@register.ConfirmPassword" />
	  <ValidationMessage For="@(() => register.ConfirmPassword)" />
	 </div>
	</div>
	<div>
	 <div class="form-group">
	  <div class="row">
	   <div class="col-sm-6 offset-sm-3">
		<button class="form-control btn btn-login" type="submit">Регистриране</button>
	   </div>
	  </div>
	  <label class="text-danger">@Error</label>
	 </div>
	</div>
   </div>
  </EditForm>
  <EditForm OnValidSubmit="OpenLoginForm" Model="Message" Context="SendMessageForm">
   <div class="row">
	<div class="col-12">
	 <button style="border: 0; background-color: transparent; color: white;" type="submit">Вече имате акаунт? Щракнете тук, за да влезете</button>
	</div>
   </div>
  </EditForm>
 </div>
</div>

@code {
	[CascadingParameter]
	BlazoredModalInstance ModalForm { get; set; }

	private RegisterModel register = new RegisterModel();
	private List<UserRoleModel> UserTypes = new List<UserRoleModel>();
	private bool ShowErrors;
	private string Error = "";
	private SendMessage Message = new SendMessage();

	protected override async Task OnInitializedAsync()
	{
		var request = await ApiService.GetUserRoles();

		if (request.IsOk)
		{
			UserTypes = request
				.ResponseData
				.UserRoles
				.Where(r => r.RoleName != Security.Role.Administrator && r.RoleName != Security.Role.Employe)
				.Select(x => new UserRoleModel
				{
					RoleId = x.RoleId,
					RoleName = x.RoleName.Contains("User") ?
						x.RoleName.Replace("User", "Юзър") :
						x.RoleName.Contains("Owner") ?
						x.RoleName.Replace("Owner", "Собственик на хотел") : null
				})
				.ToList();
		}
	}

	private async Task OnSubmit()
	{
		ShowErrors = false;
		var result = await ApiService.Register(register);

		if (result.IsOk)
		{
		    await GoToLoginForm();
		    NavigationManager.NavigateTo("/");
		}
		else
		{
		    ShowErrors = true;
		    Error = string.Join(Environment.NewLine, result.Errors);
		}
	}

	private async Task OpenLoginForm()
	{
	    await GoToLoginForm();
	}

    private async Task GoToLoginForm()
    {
        Message.Message = "07b613fa8fbf";
        await ModalForm.CloseAsync(ModalResult.Ok(Message.Message));
    }

	internal class SendMessage
	{
		public string Message { get; set; }
	}
}