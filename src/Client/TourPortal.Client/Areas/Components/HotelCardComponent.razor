@using System.Text.RegularExpressions
@using TourPortal.Client.Data
@using TourPortal.Infrastructure.Shared.Enums
@using TourPortal.Infrastructure.Shared.Models.Hotel

@if (!IsEditable)
{
    <HotelCardModelComponent HotelImageUrl="@HotelInfo.HotelImageUrl" HotelName="@HotelInfo.HotelName" City="@HotelInfo.City" Address="@HotelInfo.Address">
        <ContactsSection>
            @if (HotelInfo.Contacts.Any())
            {
                @foreach (var (contact, contactType) in HotelInfo.Contacts)
                {
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">@contactType: </label>
                        <div class="col-sm-10">
                            <input type="text" readonly class="form-control-plaintext" value="@contact">
                        </div>
                    </div>
                }
            }
        </ContactsSection>
        <ButtonSection>
            @ButtonSection
        </ButtonSection>
    </HotelCardModelComponent>
}
else
{
    @if (IsAddHotel)
    {
        <HotelCardModelComponent IsEditable="IsAddHotel">
            <BindImageUrl>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@HotelModel.HotelImageUrl" @oncuechange="@(() => FeeldIsChanged())" placeholder="Image url">
            </BindImageUrl>
            <BindHotelName>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@HotelModel.HotelName" @oncuechange="@(() => FeeldIsChanged())">
            </BindHotelName>
            <BindCity>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@HotelModel.City" @oncuechange="@(() => FeeldIsChanged())">
            </BindCity>
            <BindAddress>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@HotelModel.Address" @oncuechange="@(() => FeeldIsChanged())">
            </BindAddress>
            <ContactsSection>
                @if (HotelModel.Contacts.Any())
                            {
                                @foreach (var hotelContact in HotelModel.Contacts)
                                {
                                    ContactType contactType = hotelContact.Value;
                                    string contact = hotelContact.Key;
                                    <div class="form-group row">
                                        <label class="col-sm-2 col-form-label">@contactType: </label>
                                        <div class="col-sm-10 contact">
                                            <input type="text" id="contact" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@contact">
                                            <button @onclick="@(() => RemoveContact(contact))">Премахни</button>
                                        </div>
                                    </div>
                                }
                            }
                            @if (!isAdd)
                            {
                                <div class="row d-flex justify-content-end">
                                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => IsAddChange()) Text="Добави контакти" ButtonStyle="ButtonStyle.Primary"/>
                                </div>
                            }
                            else
                            {
                                <div class="row">
                                    <div class="col-12 d-flex p-0">
                                        <div class="col-6">
                                            <select class="custom-select" @bind="@newContactType">
                                                @foreach (var value in contactTypes)
                                                {
                                                    <option value="@value">@value</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-6">
                                            <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@newContact">
                                        </div>
                                    </div>
                                    <div class="col-12 d-flex justify-content-end p-0 pt-3">
                                        <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => AddContact()) Text="Запази" ButtonStyle="ButtonStyle.Primary"/>
                                        <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => CancleAddContact()) Text="Отказ" ButtonStyle="ButtonStyle.Warning"/>
                                    </div>
                                </div>
                            }
            </ContactsSection>
            <ButtonSection>
                @ButtonSection
            </ButtonSection>
        </HotelCardModelComponent>
    }
    @if (IsChangedHotel)
    {
        <HotelCardModelComponent IsEditable="IsChangedHotel">
            <BindImageUrl>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@HotelInfo.HotelImageUrl" @oncuechange="@(() => FeeldIsChanged())" placeholder="Image url">
            </BindImageUrl>
            <BindHotelName>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@HotelInfo.HotelName" @oncuechange="@(() => FeeldIsChanged())">
            </BindHotelName>
            <BindCity>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@HotelInfo.City" @oncuechange="@(() => FeeldIsChanged())">
            </BindCity>
            <BindAddress>
                <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@HotelInfo.Address" @oncuechange="@(() => FeeldIsChanged())">
            </BindAddress>
            <ContactsSection>
                @if (HotelInfo.Contacts.Any())
                    {
                        @foreach (var hotelContact in HotelInfo.Contacts)
                        {
                            ContactType contactType = hotelContact.Value;
                            string contact = hotelContact.Key;
                            <div class="form-group row">
                                <label class="col-sm-2 col-form-label">@contactType: </label>
                                <div class="col-sm-10 contact">
                                    <input type="text" id="contact" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@contact">
                                    <button @onclick="@(() => RemoveContact(contact))">Премахни</button>
                                </div>
                            </div>
                        }
                    }
                    @if (!isAdd)
                    {
                        <div class="row d-flex justify-content-end">
                            <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => IsAddChange()) Text="Добави контакти" ButtonStyle="ButtonStyle.Primary"/>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-12 d-flex p-0">
                                <div class="col-6">
                                    <select class="custom-select" @bind="@newContactType">
                                        @foreach (var value in contactTypes)
                                        {
                                            <option value="@value">@value</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-6">
                                    <input type="text" class="form-control" aria-label="Default" aria-describedby="inputGroup-sizing-default" @bind-value="@newContact">
                                </div>
                            </div>
                            <div class="col-12 d-flex justify-content-end p-0 pt-3">
                                <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => AddContact()) Text="Запази" ButtonStyle="ButtonStyle.Primary"/>
                                <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => CancleAddContact()) Text="Отказ" ButtonStyle="ButtonStyle.Warning"/>
                            </div>
                        </div>
                    }
            </ContactsSection>
            <ButtonSection>
                @ButtonSection
            </ButtonSection>
        </HotelCardModelComponent>
    }
}

@code {
    [Parameter]
    public RenderFragment ButtonSection { get; set; }
    
    [Parameter]
    public bool IsEditable { get; set; }
    
    [Parameter]
    public bool IsChangedHotel { get; set; }
    
    [Parameter]
    public bool IsAddHotel { get; set; }

    [Parameter]
    public AddHotelModel HotelModel { get; set; } = new AddHotelModel();
    
    [Parameter]
    public HotelInfoModel HotelInfo { get; set; }

    [Parameter]
    public EventCallback<AddHotelModel> OnChangedHotelModel { get; set; }

    [Parameter]
    public EventCallback<HotelInfoModel> OnChangedHotelInfo { get; set; }

    private bool isAdd = false;
    private string newContact = string.Empty;
    private Regex phoneRegex = new Regex(@"08[789]\d{7}\b");
    private Regex emailRegex = new Regex(@"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?");
    private ContactType newContactType;
    private List<ContactType> contactTypes = new List<ContactType>
    {
        {ContactType.Email},
        {ContactType.Phone},
        {ContactType.Fax}
    };

    private async Task AddContact()
    {
        if (newContactType == ContactType.Phone)
        {
            if (!phoneRegex.IsMatch(newContact))
            {
                isAdd = false;
                return;
            }
        }

        if (newContactType == ContactType.Email)
        {
            if (!emailRegex.IsMatch(newContact))
            {
                isAdd = false;
                return;
            }
        }

        if (HotelModel != null)
        {
            if (!HotelModel.Contacts.ContainsKey(newContact))
            {
                HotelModel.Contacts[newContact] = newContactType;
            }
        
            await OnChangedHotelModel.InvokeAsync(HotelModel);
        }

        if (HotelInfo != null)
        {
            if (!HotelInfo.Contacts.ContainsKey(newContact))
            {
                HotelInfo.Contacts[newContact] = newContactType;
            }
        
            await OnChangedHotelInfo.InvokeAsync(HotelInfo);
        }
        
        newContact = string.Empty;
        IsAddChange();
        StateHasChanged();
    }

    private async Task RemoveContact(string contact)
    {
        if (HotelModel != null)
        {
            if (HotelModel.Contacts.Any())
            {
                HotelModel.Contacts.Remove(contact);
                await OnChangedHotelModel.InvokeAsync(HotelModel);
            }
        }

        if (HotelInfo != null)
        {
            if (HotelInfo.Contacts.Any())
            {
                HotelInfo.Contacts.Remove(contact);
                await OnChangedHotelInfo.InvokeAsync(HotelInfo);
            }
        }
    }

    private void CancleAddContact()
    {
        if (HotelModel != null)
        {
            HotelModel.Contacts = new Dictionary<string, ContactType>();
        }

        isAdd = false;
        StateHasChanged();
    }

    private async Task FeeldIsChanged()
    {
        if (HotelModel != null)
        {
            await OnChangedHotelModel.InvokeAsync(HotelModel);
        }

        if (HotelInfo != null)
        {
            await OnChangedHotelInfo.InvokeAsync(HotelInfo);
        }
    }

    private void IsAddChange() => isAdd = isAdd != true;
}
<style>
    div.contact input[type=text] {
        float: left;
        width: 80%;
    }

    div.contact button {
        float: left;
        width: 20%;
        padding: 3px;
        background: red;
        color: white;
        font-size: 17px;
        border: 1px solid grey;
        border-left: none;
        cursor: pointer;
        border-radius: 5px;
    }

    div.contact button:hover {
        background: #0b7dda;
    }

    div.contact::after {
        content: "";
        clear: both;
        display: table;
    }
</style>