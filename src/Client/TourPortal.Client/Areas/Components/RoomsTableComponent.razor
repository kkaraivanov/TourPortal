@using TourPortal.Infrastructure.Shared.Models.Hotel

<TableComponent Items="rooms" IsHover="true" IsHeaderTextCenter="true">
    <Columns>
        <ColumnComponent Title="Снимка"/>
        <ColumnComponent Title="Стая №" Searchable="true" OnSearchChanged="@(e => OnSearchChanged(e, "roomNumber"))" />
        <ColumnComponent Title="Брой легла"/>
        <ColumnComponent Title="Брой посетители"/>
        <ColumnComponent Title="Цена за нощувка"/>
        <ColumnComponent Title="Тип на стаята"/>
    </Columns>
    <Row Context="roomResponse">
        <tr class="btn-row" @onclick="@(() => OpenRoom(roomResponse.Id))">
            @if (roomResponse.RoomImages.Any())
            {
                var imageUrl = roomResponse.RoomImages.FirstOrDefault();
                <td style="width: 20%"><img class="card-img-top" src="@imageUrl" alt="Card image cap"></td>
            }
            else
            {
                <td style="width: 20%"><img class="card-img" src="/images/hotel.png" alt="Card image cap"></td>
            }
            <td class="text-center">@roomResponse.RoomNumber</td>
            <td class="text-center">@roomResponse.CountOfBeds</td>
            <td class="text-center">@roomResponse.CountOfPersons</td>
            <td class="text-center">@roomResponse.Price</td>
            <td class="text-center">@roomResponse.RoomType</td>
        </tr>
    </Row>
</TableComponent>

<div>
    <button class="btn-primary mr-2 p-1" @onclick="@(e => Navigate("prev"))">Назад</button>
    @for (int i = 0; i < TotalPages; i++)
    {
        var pageNumbe = i;
        <button class="btn @(CurrentPage == pageNumbe ? "btn-dark disable" : "btn-info") ml-1 mr-1" @onclick="@(e => UpdateList(pageNumbe))">@(i + 1)</button>
    }
    <button class="btn-primary ml-2 p-1" @onclick="@(e => Navigate("next"))">Напред</button>
</div>

@code {
    [Parameter]
    public string HotelId { get; set; }

    private int PageSize => 5;
    private int TotalPages = 0;
    private int CurrentPage = 0;
    private int Skip = 0;
    private int count;
    private bool isSearchChanged;
    private RoomResponse roomResponse = new RoomResponse();
    private List<RoomResponse> rooms = new List<RoomResponse>();
    private List<RoomResponse> selectRooms = new List<RoomResponse>();

    protected override async Task OnInitializedAsync()
    {
        var requestRoomsCount = await ApiService.GetRoomsCount(HotelId);

        if (requestRoomsCount.IsOk)
        {
            count = requestRoomsCount.ResponseData;
            TotalPages = (int)Math.Ceiling(count / (decimal)PageSize);
        }

        await GetData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateList();
            StateHasChanged();
        }
    
        await base.OnAfterRenderAsync(firstRender);
    }

    private void OpenRoom(string roomId)
    {
        var url = NavigationManager.Uri.Split('/');
        var from = url[^1];
        NavigationManager.NavigateTo($"/user/{from}/room/{roomId}");
    }

    private async Task UpdateList(int pageNumber = 0)
    {
        if (rooms != null && !string.IsNullOrEmpty(HotelId))
        {
            var requestRooms = await ApiService.GetRooms(HotelId, pageNumber * PageSize, PageSize);
            if (requestRooms.IsOk)
            {
                rooms = requestRooms.ResponseData.ToList();
                selectRooms = rooms.ToList();
            }
    
            TotalPages = (int)Math.Ceiling(count / (decimal)PageSize);
            CurrentPage = pageNumber;
        }
    }

    private async Task GetData()
    {
        if (rooms != null && !string.IsNullOrEmpty(HotelId)) 
        {
            var requestRooms = await ApiService.GetRooms(HotelId, 0, PageSize);
            if (requestRooms.IsOk)
            {
                rooms = requestRooms.ResponseData.ToList();
                selectRooms = rooms.ToList();
            }
        }
    }

    private async Task Navigate(string direction)
    {
        if (direction == "prev" && CurrentPage != 0)
        {
            CurrentPage -= 1;
        }

        if (direction == "next" && CurrentPage != TotalPages-1)
        {
            CurrentPage += 1;
        }

        await UpdateList(CurrentPage);
    }

    private void OnSearchChanged(ChangeEventArgs onChanged, string columnName)
    {
        var stringFromEvent = onChanged.Value.ToString();
        isSearchChanged = true;
        // TODO: add filter search
        if (!string.IsNullOrEmpty(stringFromEvent))
        {
            var roomNumber = int.Parse(stringFromEvent);
            rooms = selectRooms.Where(x => x.RoomNumber == roomNumber).ToList();
        }
        else
        {
            rooms = selectRooms.ToList();
        }
    }
}

<style>
    .btn-row {
        cursor: pointer;
    }
</style>