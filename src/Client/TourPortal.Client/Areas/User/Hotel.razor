@attribute [Authorize(Roles = Security.Role.Owner)]
@page "/user/hotel"
@using TourPortal.Client.Data
@using TourPortal.Infrastructure.Shared.Models.Hotel

<PageModelComponent>
	<PageHeader>
		<h3>Хотел @hotelName</h3>
	</PageHeader>
    <PageBody>
        @if (isHotelExist)
        {
            @if (!isAddButtonClick)
            {
                <HotelCardComponent HotelInfo="@hoteInfolModel">
                    <ButtonSection>
                        <div class="row d-flex justify-content-end">
                            <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => OnAddButtonClick()) Text="Добави хотел" ButtonStyle="ButtonStyle.Primary"/>
                        </div>
                    </ButtonSection>
                </HotelCardComponent>
            }
            else
            {
                <EditForm OnValidSubmit="AddHotelToDatabase" Model="hotelModel" Context="HotelForm">
                    <HotelCardComponent HotelModel="@hotelModel" IsAddHotel="@isHotelExist" IsEditable="@isHotelExist" OnChangedHotelModel="@HotelIsChanged">
                        <ButtonSection>
                            <div class="row d-flex flex-row justify-content-end">
                                <div>
                                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => OnAddButtonClick()) Text="Отказ" ButtonStyle="ButtonStyle.Primary"/>
                                </div>
                                <div>
                                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => AddHotelToDatabase()) Text="Запази" ButtonStyle="ButtonStyle.Success"/>
                                </div>
                            </div>
                        </ButtonSection>
                    </HotelCardComponent>
                </EditForm>
            }
        }
        else
        {
            @if (!isChangeButtonClick)
            {
                <HotelCardComponent HotelInfo="@hoteInfolModel">
                    <ButtonSection>
                        <div class="row d-flex justify-content-end">
                            <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => OnChangeButtonClick()) Text="Редактирай" ButtonStyle="ButtonStyle.Primary"/>
                        </div>
                    </ButtonSection>
                </HotelCardComponent>
            }
            else
            {
                <EditForm OnValidSubmit="ChangeHotelData" Model="hoteInfolModel" Context="HotelForm">
                    <HotelCardComponent HotelInfo="@hoteInfolModel" IsChangedHotel="@isChangeButtonClick" IsEditable="@isChangeButtonClick" OnChangedHotelInfo="@HotelIsChanged">
                        <ButtonSection>
                            <div class="row d-flex flex-row justify-content-end">
                                <div>
                                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => OnChangeButtonClick()) Text="Отказ" ButtonStyle="ButtonStyle.Primary"/>
                                </div>
                                <div>
                                    <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => ChangeHotelData()) Text="Запази" ButtonStyle="ButtonStyle.Success"/>
                                </div>
                            </div>
                        </ButtonSection>
                    </HotelCardComponent>
                </EditForm>
            }
        }
    </PageBody>
</PageModelComponent>

@code {
    private bool isHotelExist;
    private bool isAddButtonClick;
    private bool isChangeButtonClick;
    private string hotelName = string.Empty;
    private AddHotelModel hotelModel = new AddHotelModel();
    private HotelInfoModel hoteInfolModel = new HotelInfoModel();

    protected override async Task OnParametersSetAsync()
    {
        isHotelExist = User.Hotel == null;

        if (!isHotelExist)
        {
            hotelName = User.Hotel.HotelName;
            hoteInfolModel = User.Hotel;
        }
    }

    private async Task ChangeHotelData()
    {
        if (hoteInfolModel != null)
        {
            if (string.IsNullOrEmpty(hoteInfolModel.HotelName) ||
                string.IsNullOrEmpty(hoteInfolModel.City) ||
                string.IsNullOrEmpty(hoteInfolModel.Address))
            {
                return;
            }
        }
    }

    private async Task AddHotelToDatabase()
    {
        if (hotelModel != null)
        {
            if (string.IsNullOrEmpty(hotelModel.HotelName) ||
                string.IsNullOrEmpty(hotelModel.City) ||
                string.IsNullOrEmpty(hotelModel.Address))
            {
                return;
            }

            var request = await ApiService.AddNewHotel(hotelModel);

            if (request.IsOk)
            {
                var newHotelData = request.ResponseData;
                var newHotel = new HotelInfoModel
                {
                    Id = newHotelData.Id,
                    HotelName = newHotelData.HotelName,
                    City = newHotelData.City,
                    Address = newHotelData.Address,
                    Contacts = newHotelData.Contacts,
                    HotelImageUrl = newHotelData.HotelImageUrl
                };

                hoteInfolModel = newHotel;
                User.AddHotel(newHotel);
            }

            hotelName = hoteInfolModel.HotelName;
            isHotelExist = false;
            StateHasChanged();
        }
    }
    
    protected async Task OnAddButtonClick()
    {
        isAddButtonClick = isAddButtonClick != true;
    }

    protected async Task OnChangeButtonClick()
    {
        hoteInfolModel = User.Hotel;
        isChangeButtonClick = isChangeButtonClick != true;
    }

    private void HotelIsChanged(AddHotelModel hotel)
    {
        hotelModel = hotel;
    }
    
    private void HotelIsChanged(HotelInfoModel hotel)
    {
        hoteInfolModel = hotel;
    }
}
