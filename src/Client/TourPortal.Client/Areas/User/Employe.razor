@attribute [Authorize(Roles = Security.Role.Owner)]
@page "/user/employe"
@using static TourPortal.Infrastructure.Global.Global.AllertClass
@using TourPortal.Client.Helpers
@using TourPortal.Infrastructure.Shared.Models.Hotel
@using Newtonsoft.Json

<PageModelComponent>
    <PageHeader>
        <h3>Служители</h3>
    </PageHeader>
    <PageBody>
        <AlertComponent AlertShow="alertView" Message="message" CssClass="alertClass"/>
        @if (string.IsNullOrEmpty(EmployeId))
        {
            <div class="card card border-primary mb-3 p-2">
                <div class="d-md-flex flex-column">
                    <div class="col-12">
                        <RegisterEmploye EmployeHasAdded="@EmployeHasAdded"/>
                    </div>
                </div>
            </div>
            <EmployesTableComponent @ref="employeTable" ChangeEmployeId="OnChangeEmploye"/>
        }
        else
        {
            <ChangeEmployeComponent EmployeId="@EmployeId" ChangeEmploye="EmployeHasChanged"/>
        }
    </PageBody>
</PageModelComponent>

@code {
    private EmployesTableComponent employeTable;
    private string message = string.Empty;
    private string alertClass = string.Empty;
    private bool alertView;

    public string EmployeId { get; set; }
    // TODO: change register call back

    protected override async Task OnInitializedAsync()
    {
        
    }

    private void OnChangeEmploye(string employeId) => EmployeId = employeId;

    private async Task EmployeHasAdded(string message)
    {
        await employeTable.AddEmploye();

        AlertMessage(message);
        alertClass = Success;
    }
    
    private void EmployeHasChanged(string arg)
    {
        AlertMessage(arg);
    }

    private void AlertMessage(string arg)
    {
        if (!string.IsNullOrEmpty(arg))
        {
            message = arg;
            alertView = true;
            EmployeId = string.Empty;
        }
        else
        {
            EmployeId = string.Empty;
        }
    }
}
