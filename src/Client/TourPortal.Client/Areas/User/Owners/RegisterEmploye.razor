<EditForm OnValidSubmit="OnSubmit" Model="register" Context="RegisterForm">
	<DataAnnotationsValidator />
    <div class="d-flex flex-column justify-content-between h-50 h-md-100">
        <div class="row">
            <div class="col-12 col-md-6">

                <div class="form-group">
                    <label for="username" class="sr-only">User Name</label>
                    <InputText id="username" type="text" class="form-control" placeholder="Потребителско име" autofocus @bind-Value="@register.UserName"/>
                    <ValidationMessage For="@(() => register.UserName)"/>
                </div>

                <div class="form-group">
                    <label for="email" class="sr-only">Email</label>
                    <InputText id="email" type="text" class="form-control" placeholder="Email" autofocus @bind-Value="@register.Email"/>
                    <ValidationMessage For="@(() => register.Email)"/>
                </div>

                <div class="form-group">
                    <label for="password" class="sr-only">Password</label>
                    <InputText type="password" id="password" class="form-control" placeholder="Парола" @bind-Value="@register.Password"/>
                    <ValidationMessage For="@(() => register.Password)"/>
                </div>

                <div class="form-group">
                    <label for="passwordConfirm" class="sr-only">Password Confirmation</label>
                    <InputText type="password" id="passwordConfirm" class="form-control" placeholder="Потвърди палолата" @bind-Value="@register.ConfirmPassword"/>
                    <ValidationMessage For="@(() => register.ConfirmPassword)"/>
                </div>
            </div>

            <div class="col-12 col-md-6">

                <div class="form-group">
                    <label for="name" class="sr-only">FirstName</label>
                    <InputText id="name" type="text" class="form-control" placeholder="Име" autofocus @bind-Value="@register.FirstName"/>
                    <ValidationMessage For="@(() => register.FirstName)"/>
                </div>

                <div class="form-group">
                    <label for="midlename" class="sr-only">MidleName</label>
                    <InputText id="midlename" type="text" class="form-control" placeholder="Презиме" autofocus @bind-Value="@register.MidleName"/>
                    <ValidationMessage For="@(() => register.MidleName)"/>
                </div>

                <div class="form-group">
                    <label for="lastname" class="sr-only">LastName</label>
                    <InputText id="lastname" type="text" class="form-control" placeholder="Фамилия" autofocus @bind-Value="@register.LastName"/>
                    <ValidationMessage For="@(() => register.LastName)"/>
                </div>
                
                <div class="form-group">
                    <label for="phonenumber" class="sr-only">PhoneNumber</label>
                    <InputText id="phonenumber" type="text" class="form-control" placeholder="Телефон" autofocus @bind-Value="@register.PhoneNumber"/>
                    <ValidationMessage For="@(() => register.PhoneNumber)"/>
                </div>

            </div>
        </div>
        <div class="row d-flex justify-content-end">
            <RadzenButton style="margin: 0 1rem 1rem 0" Click="@(() => Refresh())" Text="Изчисти" ButtonStyle="ButtonStyle.Secondary"/>
            <RadzenButton style="margin: 0 1rem 1rem 0" type="submit" Click="@(() => OnSubmit())" Text="Добави" ButtonStyle="ButtonStyle.Primary"/>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<string> EmployeHasAdded { get; set; }

    private RegisterModel register = new RegisterModel();
    private UserRoleModel employeRole = new UserRoleModel();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(employeRole.RoleId) || string.IsNullOrEmpty(employeRole.RoleName))
        {
            var request = await ApiService.GetUserRoles();
            if (request.IsOk && request.ResponseData != null)
            {
                employeRole = request
                    .ResponseData
                    .UserRoles
                    .Where(r => r.RoleName == Security.Role.Employe)
                    .Select(x => new UserRoleModel
                    {
                        RoleId = x.RoleId,
                        RoleName = x.RoleName
                    })
                    .FirstOrDefault();
            }
        }
        
    }

    private async Task OnSubmit()
    {
        register.RoleId = employeRole.RoleId;
        var registerRequest = await ApiService.RegisterEmploye(register);
        if (registerRequest.IsOk)
        {
            var result = registerRequest.ResponseData;
            if (result is null)
            {
                //TODO: return error
            }
            else
            {
                await EmployeHasAdded.InvokeAsync(result.UserId);
                await Refresh();
            }
        }
    }

    private async Task Refresh()
    {
        await Task.Run(() => register = new RegisterModel());
    }
}
